openapi: "3.0.0"
info:
  version: 1.0.0
  title: EcoMap Rest API
tags:
  - name: User
  - name: Employee
  - name: Container
servers:
  - url: https://server-7fzc7ivuwa-ew.a.run.app/api
    description: Production server.
  - url: http://localhost:8080/api
    description: Local server.

paths:
  /users:
    post:
      summary: Create a user.
      operationId: createUser
      description: Creates a new user with the specified data.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPost"
      responses:
        201:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Username already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: List users.
      operationId: listUsers
      description: Returns the users with the specified filter.
      tags:
        - User
      security:
        - BearerAuth: [manager]
      parameters:
        - $ref: "#/components/parameters/LimitQueryParam"
        - $ref: "#/components/parameters/OffsetQueryParam"
        - $ref: "#/components/parameters/OrderQueryParam"
        - $ref: "#/components/parameters/UserSortQueryParam"
        - name: username
          in: query
          description: Username to filter by.
          schema:
            $ref: "#/components/schemas/Username"
        - name: firstName
          in: query
          description: First name to filter by.
          schema:
            $ref: "#/components/schemas/Name"
        - name: lastName
          in: query
          description: Last name to filter by.
          schema:
            $ref: "#/components/schemas/Name"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersPaginated"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/{userId}:
    get:
      summary: Get a user by ID.
      operationId: getUserByID
      description: Returns the user with the specified identifier.
      tags:
        - User
      security:
        - BearerAuth: [user, manager]
      parameters:
        - $ref: "#/components/parameters/UserIdPathParam"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid user ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
    patch:
      summary: Modify a user by ID.
      operationId: patchUserByID
      description: Modifies the user with the specified identifier. Only the specified fields in the request body are updated.
      tags:
        - User
      security:
        - BearerAuth: [user, manager]
      parameters:
        - $ref: "#/components/parameters/UserIdPathParam"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserPatch"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid user ID or request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Username already exists.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete a user by ID.
      operationId: deleteUserByID
      description: Deletes the user with the specified identifier.
      tags:
        - User
      security:
        - BearerAuth: [user, manager]
      parameters:
        - $ref: "#/components/parameters/UserIdPathParam"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid user ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/password:
    put:
      summary: Update a user password.
      operationId: updateUserPassword
      description: Updates the password of the user with the specified username.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordChange"
      responses:
        204:
          description: Successful operation.
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Incorrect credentials.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/password-reset:
    put:
      summary: Reset a user password.
      operationId: resetUserPassword
      description: Resets the password of the user with the specified username.
      tags:
        - User
      security:
        - BearerAuth: [manager]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordReset"
      responses:
        204:
          description: Successful operation.
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          description: User not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
  /users/signin:
    post:
      summary: Sign in a user.
      operationId: signInUser
      description: Returns a JSON Web Token for the specified username and password.
      tags:
        - User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignIn"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWT"
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Incorrect credentials.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"

  /employees/signin:
    post:
      summary: Sign in an employee.
      operationId: signInEmployee
      description: Returns a JSON Web Token for the specified username and password.
      tags:
        - Employee
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SignIn"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/JWT"
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Incorrect credentials.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
  /employees/{employeeId}:
    get:
      summary: Get an employee by ID.
      operationId: getEmployeeByID
      description: Returns the employee with the specified identifier.
      tags:
        - Employee
      security:
        - BearerAuth: [waste_operator, manager]
      parameters:
        - $ref: "#/components/parameters/EmployeeIdPathParam"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Employee"
        400:
          description: Invalid employee ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          description: Employee not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"

  /containers:
    post:
      summary: Create a container.
      operationId: createContainer
      description: Creates a new container with the specified data.
      tags:
        - Container
      security:
        - BearerAuth: [manager]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ContainerPost"
      responses:
        201:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Container"
        400:
          description: Invalid request body.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
    get:
      summary: List containers.
      operationId: listContainers
      description: Returns the containers with the specified filter.
      tags:
        - Container
      security:
        - BearerAuth: [user, waste_operator, manager]
      parameters:
        - $ref: "#/components/parameters/LimitQueryParam"
        - $ref: "#/components/parameters/OffsetQueryParam"
        - $ref: "#/components/parameters/OrderQueryParam"
        - $ref: "#/components/parameters/ContainerSortQueryParam"
        - name: category
          in: query
          description: Container category to filter by.
          schema:
            $ref: "#/components/schemas/ContainerCategory"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ContainersPaginated"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        500:
          $ref: "#/components/responses/InternalServerError"
  /containers/{containerId}:
    get:
      summary: Get a container by ID.
      operationId: getContainerByID
      description: Returns the container with the specified identifier.
      tags:
        - Container
      security:
        - BearerAuth: [user, waste_operator, manager]
      parameters:
        - $ref: "#/components/parameters/ContainerIdPathParam"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Container"
        400:
          description: Invalid container ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          description: Container not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"
    delete:
      summary: Delete a container by ID.
      operationId: deleteContainerByID
      description: Deletes the container with the specified identifier.
      tags:
        - Container
      security:
        - BearerAuth: [manager]
      parameters:
        - $ref: "#/components/parameters/ContainerIdPathParam"
      responses:
        200:
          description: Successful operation.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Container"
        400:
          description: Invalid container ID.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          $ref: "#/components/responses/Forbidden"
        404:
          description: Container not found.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        500:
          $ref: "#/components/responses/InternalServerError"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    LimitQueryParam:
      name: limit
      in: query
      description: Amount of resources to get for the provided filter.
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 100
    OffsetQueryParam:
      name: offset
      in: query
      description: Amount of resources to skip for the provided filter.
      schema:
        type: integer
        minimum: 0
        default: 0
    OrderQueryParam:
      name: order
      in: query
      description: Order to sort by.
      schema:
        type: string
        enum:
          - asc
          - desc
        default: asc
    UserSortQueryParam:
      name: sort
      in: query
      description: Name of the user field to sort by.
      schema:
        type: string
        enum:
          - username
          - firstName
          - lastName
          - createdAt
          - modifiedAt
    ContainerSortQueryParam:
      name: sort
      in: query
      description: Name of the container field to sort by.
      schema:
        type: string
        enum:
          - category
          - createdAt
          - modifiedAt

    UserIdPathParam:
      name: userId
      in: path
      description: User identifier.
      required: true
      schema:
        $ref: "#/components/schemas/UUID"
    EmployeeIdPathParam:
      name: employeeId
      in: path
      description: Employee identifier.
      required: true
      schema:
        $ref: "#/components/schemas/UUID"
    ContainerIdPathParam:
      name: containerId
      in: path
      description: Container identifier.
      required: true
      schema:
        $ref: "#/components/schemas/UUID"

  schemas:
    Error:
      type: object
      required:
        - code
      properties:
        code:
          type: string
          enum:
            - bad_request
            - unauthorized
            - forbidden
            - not_found
            - conflict
            - internal_server_error
        message:
          type: string
    GeoJSON:
      type: object
      description: An object in GeoJSON format.
      example: |
        {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [125.6, 10.1]
          }
        }
    UUID:
      type: string
      format: uuid
      example: "9e3a65b0-0579-4203-8112-d09ab3c6b1ff"
    Date:
      type: string
      format: date
      example: "2017-07-21"
    DateTime:
      type: string
      format: date-time
      example: "2017-07-21T17:32:28Z"
    Username:
      type: string
      minLength: 1
      maxLength: 50
      example: john-doe
    Password:
      type: string
      description: In addition to the length restrictions, the password should contain at least one regular character, one special character, and one number.
      minLength: 14
      maxLength: 72
      example: ReallySecurePassword$123
    Name:
      type: string
      minLength: 1
      maxLength: 50
      example: John

    ContainerCategory:
      type: string
      enum:
        - general
        - paper
        - plastic
        - metal
        - glass
        - organic
        - hazardous

    SignIn:
      type: object
      required:
        - username
        - password
      properties:
        username:
          $ref: "#/components/schemas/Username"
        password:
          $ref: "#/components/schemas/Password"
    JWT:
      type: object
      required:
        - token
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVcJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiWiBmFtZSI6IkPvaG4gRG9lIiWiaWF0IjOxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssW5c
    PasswordChange:
      type: object
      required:
        - username
        - oldPassword
        - newPassword
      properties:
        username:
          $ref: "#/components/schemas/Username"
        oldPassword:
          $ref: "#/components/schemas/Password"
        newPassword:
          $ref: "#/components/schemas/Password"
    PasswordReset:
      type: object
      required:
        - username
        - newPassword
      properties:
        username:
          $ref: "#/components/schemas/Username"
        newPassword:
          $ref: "#/components/schemas/Password"
    PaginatedResponse:
      type: object
      required:
        - total
      properties:
        total:
          type: integer
          description: The total amount of resources available for the provided filter.
          minimum: 0

    UserPost:
      type: object
      required:
        - username
        - password
        - firstName
        - lastName
      properties:
        username:
          $ref: "#/components/schemas/Username"
        password:
          $ref: "#/components/schemas/Password"
        firstName:
          $ref: "#/components/schemas/Name"
        lastName:
          $ref: "#/components/schemas/Name"
    UserPatch:
      type: object
      properties:
        username:
          $ref: "#/components/schemas/Username"
        firstName:
          $ref: "#/components/schemas/Name"
        lastName:
          $ref: "#/components/schemas/Name"
    User:
      type: object
      required:
        - id
        - username
        - firstName
        - lastName
        - createdAt
        - modifiedAt
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        username:
          $ref: "#/components/schemas/Username"
        firstName:
          $ref: "#/components/schemas/Name"
        lastName:
          $ref: "#/components/schemas/Name"
        createdAt:
          $ref: "#/components/schemas/DateTime"
        modifiedAt:
          $ref: "#/components/schemas/DateTime"
    UsersPaginated:
      allOf:
        - $ref: "#/components/schemas/PaginatedResponse"
        - type: object
          required:
            - users
          properties:
            users:
              type: array
              items:
                $ref: "#/components/schemas/User"

    # TODO: Update this employee structure.
    EditableEmployee:
      type: object
      required:
        - name
        - dateOfBirth
      properties:
        name:
          type: string
          example: "John Doe"
        dateOfBirth:
          $ref: "#/components/schemas/Date"
    Employee:
      allOf:
        - $ref: "#/components/schemas/EditableEmployee"
        - type: object
          required:
            - id
          properties:
            id:
              $ref: "#/components/schemas/UUID"

    ContainerPost:
      type: object
      required:
        - category
        - geom
      properties:
        category:
          $ref: "#/components/schemas/ContainerCategory"
        geom:
          $ref: "#/components/schemas/GeoJSON"
    Container:
      type: object
      required:
        - id
        - category
        - geom
        - createdAt
        - modifiedAt
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        category:
          $ref: "#/components/schemas/ContainerCategory"
        geom:
          $ref: "#/components/schemas/GeoJSON"
        createdAt:
          $ref: "#/components/schemas/DateTime"
        modifiedAt:
          $ref: "#/components/schemas/DateTime"
    ContainersPaginated:
      allOf:
        - $ref: "#/components/schemas/PaginatedResponse"
        - type: object
          required:
            - containers
          properties:
            containers:
              type: array
              items:
                $ref: "#/components/schemas/Container"

  responses:
    Unauthorized:
      description: Access token is missing or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Forbidden:
      description: Forbidden.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    InternalServerError:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
